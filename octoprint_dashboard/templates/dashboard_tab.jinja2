<!--
 * OctoPrint-Dashboard
 *
 * Authors: Jefferey Neuffer (https://github.com/j7126), Will MacCormack (https://github.com/willmac16), Stefan Cohen (https://github.com/StefanCohen)
 * 
 * Copyright (C) 2021
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
-->

<div id="dashboardContainer" class="dashboardContainer" data-bind="css: dashboardFullClass()">
  <style id="dashboard_theme_color_tag" data-bind="html: '.ct-series-a .ct-line, .dashboardGauge, .dashboardGridItem.speed svg path#t2 { stroke: ' + accentColor() + '!important; }' +
                      '.ct-chart span, .dashboardSmall, .dashboardLarge { color: ' + accentColor() + '!important; }' +
                      '.dashboardContainer svg text, .dashboardGridItem.speed svg path#t1, .dashboardGridItem.speed svg circle, #dashboardFeedrate5Avg, #dashboardFeedrateLive { stroke: ' + accentColor() + '!important; fill: ' + accentColor() + '!important; }' +
                      '.dashboardTempTick { stroke: ' + textColor() + '!important; }'">
  </style>
  <div class="dashboardFsContainer"
    data-bind="attr: {id: 'dashboardFsContainer_webcam_' + (dashboardSettings.showWebCam() && fsWebCam() && webcamState() != 0)}">

    <a id="fullWindowIconLink" title="{{ _('Full Browser Window') }}" href="#"
      data-bind="click: toggleFullBrowserWindow, visible: dashboardSettings.showFullscreen(), attr: {href: getToggleFullBrowserWindowHref()}">
      <img class="dashboardIcon" id="dashboard_fullWindowIcon" src="plugin/dashboard/static/img/fullwindow-icon.png" />
    </a>
    <input class="dashboardIcon" id="dashboard_fullScreenIcon" title="{{ _('Fullscreen (Esc to cancel)') }}"
      type="image" src="plugin/dashboard/static/img/fullscreen-icon.png"
      data-bind="click: fullScreen, visible: dashboardSettings.showFullscreen()" />
    <input class="dashboardIcon" id="dashboard_toggleWebcamIcon" title="{{ _('Toggle Webcam') }}" type="image"
      src="plugin/dashboard/static/img/webcam-icon-no-background.png"
      data-bind="click: toggleWebcam(),  visible: (!dashboardSettings.printingOnly_WebCam() || printerStateModel.isPrinting()) && dashboardSettings.showWebCam() && fsWebCam()" />

    <div class="alert alert-block"
      data-bind="visible: layerAnalysisError() && dashboardSettings.showLayerAnalysisError()" id="layerWarning">
      <strong>Warning: </strong>A layer analysis error has been detected. You may have started the print before the
      gcode analysis had been completed, or the analysis may have failed for some other reason. (You can disable this
      warning in settings)
    </div>

    <!-- HTML grid-based layout. Set to 3 columns wide in css -->
    <div class="dashboardGridContainer">

      <!-- System Info-->
      <div class="dashboardGridItem sysInfo"
        data-bind="visible: (!dashboardSettings.printingOnly_SystemInfo() || printerStateModel.isPrinting()) && dashboardSettings.showSystemInfo() && fsSystemInfo()">
        <img class="dashboardIcon" title="{{ _('CPU Usage') }}" src="plugin/dashboard/static/img/cpu-icon.png">
        <div class="inline">
          <span id="cpuInfo" title="{{ _('CPU Usage') }}" data-bind="html: cpuPercent() + '%'"></span>
          <span class="dashboardSmall" id="cpuTemp" title="{{ _('CPU Temperature') }}"
            data-bind="html: cpuTemp() + 'Â°C', style: { color: cpuTempColor()}"></span><br />
          <span class="dashboardSmall" id="cpuFreq" title="{{ _('CPU Frequency') }}"
            data-bind="html: cpuFreq() + 'MHz'"></span>
        </div>
      </div>
      <div class="dashboardGridItem sysInfo"
        data-bind="visible: (!dashboardSettings.printingOnly_SystemInfo() || printerStateModel.isPrinting()) && dashboardSettings.showSystemInfo() && fsSystemInfo()">
        <img class="dashboardIcon" title="{{ _('RAM Usage') }}" src="plugin/dashboard/static/img/ram-icon.png">
        <span id="connectionInfo" title="{{ _('Ram Usage') }}" data-bind="html: virtualMemPercent() + '%'"></span>
      </div>
      <div class="dashboardGridItem sysInfo"
        data-bind="visible: (!dashboardSettings.printingOnly_SystemInfo() || printerStateModel.isPrinting()) && dashboardSettings.showSystemInfo() && fsSystemInfo()">
        <img class="dashboardIcon" title="{{ _('Disk Usage') }}" src="plugin/dashboard/static/img/hdd-icon.png">
        <span id="stateInfo" title="{{ _('Disk Usage') }}" data-bind="html: diskUsagePercent() + '%'"></span>
      </div>

      <!-- Current Profile, Connection state, and current status-->
      <div class="dashboardGridItem" printer
        data-bind="visible: (!dashboardSettings.printingOnly_Status() || printerStateModel.isPrinting()) && dashboardSettings.showStatus() && fsStatus()">
        <img class="dashboardIcon" title="{{ _('Printer profile') }}"
          src="plugin/dashboard/static/img/printer-icon.png">
        <span id="profileInfo" title="{{ _('Profile name') }}"
          data-bind="html: printerProfilesModel.currentProfileData().name()"></span>
      </div>
      <div class="dashboardGridItem" printer
        data-bind="visible: (!dashboardSettings.printingOnly_Status() || printerStateModel.isPrinting()) && dashboardSettings.showStatus() && fsStatus()">
        <img class="dashboardIcon" title="{{ _('Connection status') }}" src="plugin/dashboard/static/img/usb-icon.png">
        <span id="connectionInfo" title="{{ _('Connection status') }}"
          data-bind="html: formatConnectionstatus(connectionModel.isOperational()), style: { 'font-size': connectionModel.isOperational() ? '' : '18px' }"></span>
      </div>
      <div class="dashboardGridItem" printer
        data-bind="visible: (!dashboardSettings.printingOnly_Status() || printerStateModel.isPrinting()) && dashboardSettings.showStatus() && fsStatus()">
        <img class="dashboardIcon" title="{{ _('Printer status') }}" src="plugin/dashboard/static/img/status-icon.png">
        <span id="stateInfo" title="{{ _('Printer status') }}" data-bind="html: printerStateModel.stateString()"></span>
      </div>

      <!-- Job Control -->
      <div class="dashboardGridItem jobControl"
        data-bind="visible: (!dashboardSettings.printingOnly_JobControlButtons() || printerStateModel.isPrinting()) && dashboardSettings.showJobControlButtons() && fsJobControlButtons()">
        <button class="btn btn-primary dashboardButton"
          data-bind="click: printerStateModel.print, enable: printerStateModel.enablePrint, css: {'btn-danger': printerStateModel.isPaused()}, attr: {title: printerStateModel.titlePrintButton}"
          id="job_print"><i class="fa"
            data-bind="css: {'fa-print': !printerStateModel.isPaused(), 'fa-undo': printerStateModel.isPaused()}"></i>
          <span data-bind="text: (printerStateModel.isPaused() ? '{{ _('Restart') }}' : '{{ _('Print') }}')">{{
            _('Print') }}</span></button>
      </div>

      <div class="dashboardGridItem jobControl"
        data-bind="visible: (!dashboardSettings.printingOnly_JobControlButtons() || printerStateModel.isPrinting()) && dashboardSettings.showJobControlButtons() && fsJobControlButtons()">
        <button class="btn dashboardButton" id="job_pause"
          data-bind="click: function() { printerStateModel.isPaused() ? printerStateModel.onlyResume() : printerStateModel.onlyPause(); }, enable: printerStateModel.enablePause, css: {active: printerStateModel.isPaused()}, attr: {title: printerStateModel.titlePauseButton}"><i
            class="fa"
            data-bind="css: {'fa-pause': !printerStateModel.isPaused(), 'fa-play': printerStateModel.isPaused()}"></i>
          <span data-bind="visible: !printerStateModel.isPaused()">{{ _('Pause') }}</span><span
            data-bind="visible: printerStateModel.isPaused()">{{ _('Resume') }}</span></button>
      </div>
      <div class="dashboardGridItem jobControl"
        data-bind="visible: (!dashboardSettings.printingOnly_JobControlButtons() || printerStateModel.isPrinting()) && dashboardSettings.showJobControlButtons() && fsJobControlButtons()">
        <button class="btn dashboardButton" id="job_cancel"
          data-bind="click: jobCancel, enable: printerStateModel.enableCancel"
          title="{{ _('Cancels the print job') }}"><i class="fa fa-stop"></i> <span>{{ _('Cancel') }}</span></button>
      </div>
    </div>

    <!-- Temps and Fan -->
    <div class="dashboardGridContainer">
      <!-- ko if: fsTempGauges -->
      <!-- ko foreach: temperatureModel.tools -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge" data-bind="css: $parent.gaugesCentreInGrid('tool', $index()), visible: (!$parent.dashboardSettings.printingOnly_TempGauges() || $parent.printerStateModel.isPrinting()) && (($parent.temperatureModel.isOperational()
          && !$parent.dashboardSettings.hideHotend()) || ( $parent.temperatureModel.isOperational() && target() > 0
          && $parent.dashboardSettings.hideHotend() )) && $parent.dashboardSettings.enableTempGauges()">
        <img class="dashboardIcon" title="{{ _('Hotend temp (target temp)') }}" src="plugin/dashboard/static/img/hotend-icon.png">
        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': $parent.tempGaugeViewBox()}">
          <path class="bg" stroke="#ccc" data-bind="attr: { 'd': $parent.tempGaugeSvgPath() }" fill="none" />

          <path class="tempCurrent" stroke="#08c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': $parent.formatTempOffset(actual(), $parent.dashboardSettings.hotendTempMax()),
              'stroke':  $parent.tempColor(actual(), target()), 'd': $parent.tempGaugeSvgPath(), 'stroke-dasharray': $parent.tempGaugePathLen() }" />

          <!-- ko foreach: $parent.tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parents[1].tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * $parents[1].dashboardSettings.hotendTempMax()), attr: { 'x': $parents[1].tempGaugeTickTextX($data), 'y': $parents[1].tempGaugeTickTextY($data) }"></text>

          <!-- /ko -->

          <path class="dashboard_threeQuarterGauge_target" stroke="black" fill="none" data-bind="attr: { 'stroke-dashoffset': $parent.formatTempOffset(target(), $parent.dashboardSettings.hotendTempMax()),
              'd': $parent.tempGaugeSvgPath(), 'stroke-dasharray': $parent.tempGaugePathLen() }" />
          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: Math.round(actual()) + 'Â°C'"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: name()"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: '{{ _('Target') }}: ' + target() + 'Â°C' "></text>
        </svg>
      </div>
      <!-- /ko -->
      <!-- /ko -->

      <!-- Bed temp -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="css: gaugesCentreInGrid('bed'), visible: (!dashboardSettings.printingOnly_TempGauges() || printerStateModel.isPrinting()) && temperatureModel.isOperational() && temperatureModel.hasBed() && dashboardSettings.enableTempGauges() && fsTempGauges()">
        <img class="dashboardIcon" title="{{ _('Bed temp (target temp)') }}"
          src="plugin/dashboard/static/img/bed-icon.png">
        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': tempGaugeViewBox()}">
          <path class="bg" stroke="#ccc" fill="none" data-bind="attr: { 'd': tempGaugeSvgPath() }" />

          <path class="tempCurrent" stroke="##08c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': formatTempOffset(temperatureModel.bedTemp.actual(), dashboardSettings.bedTempMax()), 'stroke':  tempColor(temperatureModel.bedTemp.actual(), temperatureModel.bedTemp.target()), 'd': tempGaugeSvgPath(), 'stroke-dasharray': tempGaugePathLen() }" />

          <!-- ko foreach: tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parent.tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * $parent.dashboardSettings.bedTempMax()), attr: { 'x': $parent.tempGaugeTickTextX($data), 'y': $parent.tempGaugeTickTextY($data) }"></text>

          <!-- /ko -->

          <path class="dashboard_threeQuarterGauge_target" stroke="black" fill="none"
            data-bind="attr: { 'stroke-dashoffset': formatTempOffset(temperatureModel.bedTemp.target(), dashboardSettings.bedTempMax()), 'd': tempGaugeSvgPath(), 'stroke-dasharray': tempGaugePathLen() }" />
          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: Math.round(temperatureModel.bedTemp.actual()) + 'Â°C'"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: temperatureModel.bedTemp.name()"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: '{{ _('Target') }}: ' + temperatureModel.bedTemp.target() + 'Â°C' "></text>
        </svg>
      </div>

      <!-- Chamber temp -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="css: gaugesCentreInGrid('chamber'), visible: (!dashboardSettings.printingOnly_TempGauges() || printerStateModel.isPrinting()) && temperatureModel.isOperational() && temperatureModel.hasChamber() && dashboardSettings.enableTempGauges() && fsTempGauges()">
        <img class="dashboardIcon" title="{{ _('Chamber temp (target temp)') }}"
          src="plugin/dashboard/static/img/chamber-icon.png">
        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': tempGaugeViewBox()}">
          <path class="bg" stroke="#ccc" fill="none" data-bind="attr: { 'd': tempGaugeSvgPath() }" />

          <path class="tempCurrent" stroke="##08c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': formatTempOffset(temperatureModel.chamberTemp.actual(), dashboardSettings.chamberTempMax()),
              'stroke':  tempColor(temperatureModel.chamberTemp.actual(), temperatureModel.chamberTemp.target()), 'd': tempGaugeSvgPath(), 'stroke-dasharray': tempGaugePathLen() }" />

          <!-- ko foreach: tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parent.tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * $parent.dashboardSettings.chamberTempMax()), attr: { 'x': $parent.tempGaugeTickTextX($data), 'y': $parent.tempGaugeTickTextY($data) }"></text>

          <!-- /ko -->

          <path class="dashboard_threeQuarterGauge_target" stroke="black" fill="none" data-bind="attr: { 'stroke-dashoffset': formatTempOffset(temperatureModel.chamberTemp.target(), dashboardSettings.chamberTempMax()),
              'd': tempGaugeSvgPath(), 'stroke-dasharray': tempGaugePathLen() }" />
          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: Math.round(temperatureModel.chamberTemp.actual()) + 'Â°C'"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: temperatureModel.chamberTemp.name()"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: '{{ _('Target') }}: ' + temperatureModel.chamberTemp.target() + 'Â°C' "></text>
        </svg>
      </div>

      <!-- Fan Speed -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="css: gaugesCentreInGrid('fan'), visible: (!dashboardSettings.printingOnly_Fan() || printerStateModel.isPrinting()) && temperatureModel.isOperational() && dashboardSettings.showFan() && fsFan()">
        <img class="dashboardIcon" title="{{ _('Fan Speed') }}" src="plugin/dashboard/static/img/fan-icon.png">
        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': tempGaugeViewBox()}">
          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" title="{{ _('Fan Speed') }}" data-bind="html: formatFanText(fanSpeed())"></text>
          <path class="bg" stroke="#ccc" fill="none" data-bind="attr: { 'd': tempGaugeSvgPath() }" />

          <!-- ko foreach: tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parent.tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * 100), attr: { 'x': $parent.tempGaugeTickTextX($data), 'y': $parent.tempGaugeTickTextY($data) }"></text>

          <!-- /ko -->

          <path class="dashboardGauge" stroke="#09c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': formatFanOffset(fanSpeed()), 'd': tempGaugeSvgPath(), 'stroke-dasharray': tempGaugePathLen() }" />
          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c">{{ _('Fan Speed') }}</text>
          <text class="dashboardGauge" font-size="20" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c">{{ _('Fan') }}</text>
        </svg>
      </div>

      <!-- Enclosure Sensors as 3/4 -->
      <!-- ko if: enclosureViewModel && dashboardSettings.enclosureGaugeStyle() == "3/4" -->
      <!-- ko foreach: enclosureViewModel.rpi_inputs_temperature_sensors() -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="css: $parent.gaugesCentreInGrid('enclosure', $index()), visible: (!$parent.dashboardSettings.printingOnly_SensorInfo() || $parent.printerStateModel.isPrinting()) && $parent.dashboardSettings.showSensorInfo() && $parent.fsSensorInfo()">
        <img class="dashboardIcon" data-bind="title: label + 'Sensor Info'"
          src="plugin/dashboard/static/img/ambient-sensor-icon.png">

        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': $parent.tempGaugeViewBox()}">
          <path class="bg" stroke="#ccc" fill="none" data-bind="attr: { 'd': $parent.tempGaugeSvgPath() }" />
          <path class="tempCurrent" stroke="#09c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': $parent.formatTempOffset(temp_sensor_temp(), $parent.dashboardSettings.chamberTempMax()), 'd': $parent.tempGaugeSvgPath(), 'stroke-dasharray': $parent.tempGaugePathLen() }" />

          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: temp_sensor_temp() + (use_fahrenheit() ? 'Â°F' : 'Â°C')"
            title="Ambient Temp Sensor"></text>
          <!-- ko if: temp_sensor_humidity -->
          <text class="dashboardGauge" font-size="30" x="50%" y="60%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: temp_sensor_humidity() + '%'" title="Ambient Humidity Sensor"></text>
          <!-- /ko -->

          <!-- ko foreach: $parent.tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parents[1].tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * $parents[1].dashboardSettings.chamberTempMax()), attr: { 'x': $parents[1].tempGaugeTickTextX($data), 'y': $parents[1].tempGaugeTickTextY($data) }"></text>
          <!-- /ko -->

          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="text: label"></text>
        </svg>
      </div>
      <!-- /ko -->
      <!-- /ko -->

      <!-- Cmd Widgets as 3/4 -->

      <!-- ko if: dashboardSettings.showCommandWidgets -->
      <!-- ko foreach: commandWidgetArray -->
      <!-- ko if: enabled() && $parent.castToWidgetTypes(type()) === $parent.widgetTypes.THREE_QUARTER -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="css: $parent.gaugesCentreInGrid('cmd', $index()), visible: $parent.fsCommandWidgets() && (!$parent.dashboardSettings.printingOnly_TempGauges() || $parent.printerStateModel.isPrinting())">
        <img class="dashboardIcon" data-bind="attr: {'src': 'plugin/dashboard/static/img/' + icon(), 'title': name}" />
        <svg xmlns="http://www.w3.org/2000/svg" height="140" width="140"
          data-bind="attr: {'viewBox': $parent.tempGaugeViewBox()}">
          <path class="bg" stroke="#ccc" fill="none" data-bind="attr: { 'd': $parent.tempGaugeSvgPath() }" />

          <path class="tempCurrent" stroke="#09c" fill="none"
            data-bind="attr: { 'stroke-dashoffset': $parent.formatTempOffset($parent.cmdResults()[$index()], $parent.dashboardSettings.chamberTempMax()), 'd': $parent.tempGaugeSvgPath(), 'stroke-dasharray': $parent.tempGaugePathLen() }" />

          <!-- ko foreach: $parent.tempGaugeTicks()-->
          <path class="dashboardTempTick" stroke-width="2px" fill="none"
            data-bind="attr: { 'd': $parents[1].tempGaugeTickPath($data) }" />
          <text class="dashboardTempTickNum" font-size="10" dominant-baseline="middle" text-anchor="middle" fill="#08c"
            data-bind="html: Math.round($data * $parents[1].dashboardSettings.chamberTempMax()), attr: { 'x': $parents[1].tempGaugeTickTextX($data), 'y': $parents[1].tempGaugeTickTextY($data) }"></text>
          <!-- /ko -->


          <text class="dashboardGauge" font-size="30" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="html: Math.round($parent.cmdResults()[$index()]) + 'Â°C'"></text>
          <text class="dashboardGauge" font-size="20" x="50%" y="85%" dominant-baseline="middle" text-anchor="middle"
            fill="#08c" data-bind="text: name"></text>
        </svg>
      </div>
      <!-- /ko -->
      <!-- /ko -->
      <!-- /ko -->

    </div>

    <div class="dashboardGridContainer">

      <!-- Enclosure Sensors -->
      <!-- ko if: enclosureViewModel && dashboardSettings.enclosureGaugeStyle() == "text" -->
      <!-- ko foreach: enclosureViewModel.rpi_inputs_temperature_sensors() -->
      <div class="dashboardGridItem dashboard_threeQuarterGauge"
        data-bind="visible: (!$parent.dashboardSettings.printingOnly_SensorInfo() || $parent.printerStateModel.isPrinting()) && $parent.dashboardSettings.showSensorInfo() && $parent.fsSensorInfo()">
        <img class="dashboardIcon" title="{{ _('Sensor temp (target temp)') }}"
          src="plugin/dashboard/static/img/ambient-sensor-icon.png">
        <div class="inline">
          <span id="HumiditySensorInfo" data-bind="text: label, attr: {title: label}"></span><br />
          <!-- ko if: use_fahrenheit -->
          <span id="TempSensorInfo" title="{{ _('Ambient Temp Sensor') }}"
            data-bind="html: temp_sensor_temp() + 'Â°F'"></span>
          <!-- /ko -->
          <!-- ko ifnot: use_fahrenheit -->
          <span id="TempSensorInfo" title="{{ _('Ambient Temp Sensor') }}"
            data-bind="html: temp_sensor_temp() + 'Â°C'"></span>
          <!-- /ko -->
          <!-- ko if: temp_sensor_humidity -->
          <span class="dashboardSmall" id="HumiditySensorInfo" title="{{ _('Ambient Humidity Sensor') }}"
            data-bind="html: temp_sensor_humidity() + '%'"></span>
          <!-- /ko -->
        </div>
      </div>
      <!-- /ko -->
      <!-- /ko -->

      <!-- Text Command Widgets -->
      <!-- ko if: dashboardSettings.showCommandWidgets -->
      <!-- ko foreach: commandWidgetArray -->
      <!-- ko if: enabled() && $parent.castToWidgetTypes(type()) === $parent.widgetTypes.TEXT -->
      <div class="dashboardGridItem command"
        data-bind="visible: (!$parent.dashboardSettings.printingOnly_CommandWidgets() || $parent.printerStateModel.isPrinting()) && $parent.fsCommandWidgets()">
        <img class="dashboardIcon" data-bind="attr: {src: 'plugin/dashboard/static/img/' + icon(), title: name()}" />
        <div class="inline">
          <span data-bind="text: name(), attr: {title: name()}"></span>
          <span class="dashboardSmall" title="{{_('Primary Command output')}}"
            data-bind="html: $parent.cmdResults()[$index()]"></span><br />
          <!-- <span class="dashboardSmall" data-bind="attr: { title: 'Secondary Command Output' }, html: $parent.cmdResults()[$index()][1]"></span> -->
        </div>
      </div>
      <!-- /ko -->
      <!-- /ko -->
      <!-- /ko -->

    </div>

    <!-- Printer Message-->
    <div class="dashboardGridItem printerMessage"
      data-bind="visible: (!dashboardSettings.printingOnly_PrinterMessage() || printerStateModel.isPrinting()) && dashboardSettings.showPrinterMessage() && fsPrinterMessage()">
      <br />
      <span id="printerMessage" title="{{ _('M117 Printer message') }}"
        data-bind="html: '{{ _('Msg: ') }}' + printerMessage()"></span>
      <br />
    </div>
    <!-- This section is required for Babel to pick up the english strings for translation that will only render with gettext() -WM -->
    <div class="dashboardGridItem testSection" hidden>
      <p>{{ _('The CPU temp indicator will be set to orange above the warning threshold and red above the critical
        threshold.') }}</p>
      <p>{{ _('The max range of the respective temp gauge:') }}</p>
      <p>{{ _('Hide hotend(s) when target temp is 0 (Useful for dual hotends)') }}</p>
      <p>{{ _('Temperature Ticks show reference values on the gauge. The number determines how many ticks will
        display.') }}</p>
      <p>{{ _('Temp gauges will be blue below the temp deviation of the target temp, red if it goes above and green
        between the two.') }}</p>
      <p>{{ _('The following webcams will be displayed instead of the octoprint webcam if multi webcam is enabled.') }}
      </p>
      <p>{{ _('The Feedrate widget shows the current, average (last 5 seconds) and average (print) feedrate (movement
        speed).') }}</p>
      <p>{{ _('The Feedrate widget can cause the octoprint webpage to perform slowly. If you\'re experiencing issues
        with lag, please try disabling this.') }}</p>
      <p>{{ _('The stdout output of each shell command below will be displayed in a separate widget.') }}</p>
      <p>{{ _('Editing command widgets requires dashboard admin permission') }}</p>
      <p>{{ _('The command(s) will be executed with the privileges of the octoprint server, so think twice...') }}</p>
      <p>{{ _('HLS webcams are supported, but will not respond to rotations or flipping.') }}</p>
      <p>{{ _('Temperature Ticks show reference values on the gauge. The number determines how many ticks will
        display.') }}</p>
    </div>

    <!-- Progress Circle-->
    <div class="progressContainer"
      data-bind="visible: (dashboardSettings.showProgress() || dashboardSettings.showLayerProgress() || dashboardSettings.showTimeProgress() || dashboardSettings.showHeightProgress()) && fsProgressGauges() && dashboardSettings.gaugetype() == 'circle'">
      <div>
        <!-- Time Progress Circle-->
        <div class="dashboardProgressContainer dashboardProgressInline" data-bind="visible: (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting()) && dashboardSettings.showTimeProgress()
                && (dashboardSettings.gaugetype() == 'circle')">
          <svg class="current" width="120" height="120" viewBox="0 0 120 120">
            <circle cx="60" cy="60" r="54" fill="none" stroke="#ccc" stroke-width="12" />
            <circle class="dashboardGauge" cx="60" cy="60" r="54" fill="none" stroke="#09c" stroke-width="12"
              stroke-dasharray="339.292" transform="rotate(-90 60 60)"
              data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(timeProgressString()) }" />
            <text class="dashboardGauge" font-size="30" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c" data-bind="text: timeProgressBarString()"></text>
            <text class="dashboardGauge" font-size="14" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
              data-bind="text: dashboardSettings.showProgress() ? '{{_('Time')}}' : '{{_('Job')}}'"
              fill="#08c">{{_('Time')}}</text>
          </svg>
        </div>
        <!-- GCode Progress Circle-->
        <div class="dashboardProgressContainer dashboardProgressInline" data-bind="visible: (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting()) && dashboardSettings.showProgress()
                && (dashboardSettings.gaugetype() == 'circle')">
          <svg class="current" width="120" height="120" viewBox="0 0 120 120">
            <circle cx="60" cy="60" r="54" fill="none" stroke="#ccc" stroke-width="12" />
            <circle class="dashboardGauge" cx="60" cy="60" r="54" fill="none" stroke="#09c" stroke-width="12"
              stroke-dasharray="339.292" transform="rotate(-90 60 60)"
              data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(printerStateModel.progressString()) }" />
            <text class="dashboardGauge" font-size="30" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c"
              data-bind="text: (printerStateModel.progressBarString() ? printerStateModel.progressBarString() : '0%')"></text>
            <text class="dashboardGauge" font-size="14" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
              data-bind="text: dashboardSettings.showTimeProgress() ? '{{_('GCode')}}' : '{{_('Job')}}'"
              fill="#08c">{{_('GCode')}}</text>
          </svg>
        </div>
        <!-- Height Progress Circle-->
        <div class="dashboardProgressContainer dashboardProgressInline" data-bind="visible: (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting()) && dashboardSettings.showHeightProgress()
                && (dashboardSettings.gaugetype() == 'circle')">
          <svg class="current" width="120" height="120" viewBox="0 0 120 120">
            <circle cx="60" cy="60" r="54" fill="none" stroke="#ccc" stroke-width="12" />
            <circle class="dashboardGauge" cx="60" cy="60" r="54" fill="none" stroke="#09c" stroke-width="12"
              stroke-dasharray="339.292" transform="rotate(-90 60 60)"
              data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(heightProgressString()) }" />
            <text class="dashboardGauge" font-size="30" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c" data-bind="text: heightProgressBarString()"></text>
            <text class="dashboardGauge" font-size="14" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c">{{_('Height')}}</text>
          </svg>
        </div>
        <!-- Layer Progress Circle-->
        <div class="dashboardProgressContainer dashboardLayerProgressContainer dashboardProgressInline" data-bind="visible: (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting()) && dashboardSettings.showLayerProgress()
                && (dashboardSettings.gaugetype() == 'circle'), style: {opacity: layerAnalysisError() ? 0.2 : 1}">
          <svg class="current" width="120" height="120" viewBox="0 0 120 120">
            <circle cx="60" cy="60" r="54" fill="none" stroke="#ccc" stroke-width="12" />
            <circle class="dashboardGauge" cx="60" cy="60" r="54" fill="none" stroke="#09c" stroke-width="12"
              stroke-dasharray="339.292" transform="rotate(-90 60 60)"
              data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(layerProgress()) }" />
            <text class="dashboardGauge" font-size="30" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c" data-bind="text: layerProgress() + '%'"></text>
            <text class="dashboardGauge" font-size="14" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c">{{_('Layer')}}</text>
          </svg>
        </div>

        <!-- Progress Command Widgets -->
        <!-- ko if: dashboardSettings.showCommandWidgets -->
        <!-- ko foreach: commandWidgetArray -->
        <!-- ko if: enabled() && $parent.castToWidgetTypes(type()) === $parent.widgetTypes.PROGRESS -->
        <div class="dashboardProgressContainer dashboardProgressInline"
          data-bind="visible: (!$parent.dashboardSettings.printingOnly_ProgressGauges() || $parent.printerStateModel.isPrinting())">
          <svg class="current" width="120" height="120" viewBox="0 0 120 120">
            <circle cx="60" cy="60" r="54" fill="none" stroke="#ccc" stroke-width="12" />
            <circle class="dashboardGauge" cx="60" cy="60" r="54" fill="none" stroke="#09c" stroke-width="12"
              stroke-dasharray="339.292" transform="rotate(-90 60 60)"
              data-bind="attr: {'stroke-dashoffset': $parent.formatProgressOffset($parent.cmdResults()[$index()]*100.0)}" />
            <text class="dashboardGauge" font-size="30" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle"
              fill="#08c" data-bind="text: $parent.formatPercentage($parent.cmdResults()[$index()]*100.0)"></text>
            <text class="dashboardGauge" font-size="14" x="50%" y="65%" dominant-baseline="middle" text-anchor="middle"
              data-bind="text: name" fill="#08c">{{_('Cmd Widget Progress')}}</text>
          </svg>
        </div>
        <!-- /ko -->
        <!-- /ko -->
        <!-- /ko -->
      </div>
    </div>

    <!-- SVG Time Progress Bar-->
    <div class="dashboardGridItem dashboardProgressBar" style="text-align:center;" data-bind="visible: dashboardSettings.gaugetype() == 'bar' && (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting())
        && dashboardSettings.showTimeProgress() && fsProgressGauges()">
      <span data-bind="text: dashboardSettings.showProgress() ? '{{ _('Time') }}' : '{{ _('Job') }}'"
        title="{{ _('Job Progress') }}">{{_('Time')}}</span>
      <span title="{{ _('Printer status') }}" data-bind="html: timeProgressBarString()"></span>
      <svg preserveAspectRatio="none" style="width: 100%; height: 15px;" viewBox="0 0 339.292 20">
        <path class="bg" stroke="#ccc" d="M0 10, 339.292 10"></path>
        <path class="dashboardGauge" stroke="#09c" d="M0 10, 339.292 10" stroke-dasharray="339.292"
          data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(timeProgressString()) }"></path>
      </svg>
    </div>

    <!-- SVG GCode Progress Bar-->
    <div class="dashboardGridItem dashboardProgressBar" style="text-align:center;" data-bind="visible: dashboardSettings.gaugetype() == 'bar' && (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting())
        && dashboardSettings.showProgress() && fsProgressGauges()">
      <span data-bind="text: dashboardSettings.showTimeProgress() ? 'GCode' : 'Job'"
        title="{{_('GCode Progress')}}">{{_('GCode')}}</span>
      <span title="{{ _('Printer status') }}"
        data-bind="html: (printerStateModel.progressBarString() ? printerStateModel.progressBarString() : '0%')"></span>
      <svg preserveAspectRatio="none" style="width: 100%; height: 15px;" viewBox="0 0 339.292 20">
        <path class="bg" stroke="#ccc" d="M0 10, 339.292 10"></path>
        <path class="dashboardGauge" stroke="#09c" d="M0 10, 339.292 10" stroke-dasharray="339.292"
          data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(printerStateModel.progressString()) }"></path>
      </svg>
    </div>

    <!-- SVG Height Progress Bar-->
    <div class="dashboardGridItem dashboardProgressBar" style="text-align:center;" data-bind="visible: dashboardSettings.gaugetype() == 'bar' && (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting())
        && dashboardSettings.showHeightProgress() && fsProgressGauges()">
      <span title="{{_('Height Progress')}}">{{_('Height')}}</span>
      <span title="{{ _('Printer status') }}" data-bind="html: heightProgressBarString()"></span>
      <svg preserveAspectRatio="none" style="width: 100%; height: 15px;" viewBox="0 0 339.292 20">
        <path class="bg" stroke="#ccc" d="M0 10, 339.292 10"></path>
        <path class="dashboardGauge" stroke="#09c" d="M0 10, 339.292 10" stroke-dasharray="339.292"
          data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(heightProgressString()) }"></path>
      </svg>
    </div>

    <!-- SVG Layer Progress Bar-->
    <div class="dashboardGridItem dashboardProgressBar" style="text-align:center;" data-bind="visible: dashboardSettings.gaugetype() == 'bar'
        && (!dashboardSettings.printingOnly_ProgressGauges() || printerStateModel.isPrinting()) && dashboardSettings.showLayerProgress()
        && fsProgressGauges()">
      <span title="{{ _('Layer Progress') }}">{{_('Layer')}}</span>
      <span title="{{ _('Printer status') }}" data-bind="html: layerProgress() + '%'"></span>
      <svg preserveAspectRatio="none" style="width: 100%; height: 15px;" viewBox="0 0 339.292 20">
        <path class="bg" stroke="#ccc" d="M0 10, 339.292 10"></path>
        <path class="dashboardGauge" stroke="#09c" d="M0 10, 339.292 10" stroke-dasharray="339.292"
          data-bind="attr: { 'stroke-dashoffset': formatProgressOffset(layerProgress()) }"></path>
      </svg>
    </div>

    <!-- Progress Bars -->
    <!-- ko if: dashboardSettings.showCommandWidgets -->
    <!-- ko foreach: commandWidgetArray -->
    <!-- ko if: enabled() && $parent.castToWidgetTypes(type()) === $parent.widgetTypes.PROGRESS -->
    <div class="dashboardGridItem dashboardProgressBar" style="text-align:center;"
      data-bind="visible: $parent.dashboardSettings.gaugetype() == 'bar' && (!$parent.dashboardSettings.printingOnly_ProgressGauges() || $parent.printerStateModel.isPrinting())">
      <span title="{{_('Cmd Widget Progress')}}" data-bind="text: name()"></span>
      <span
        data-bind="attr: { title: ' ' + gettext('progress')}, html: ' ' + $parent.formatPercentage($parent.cmdResults()[$index()] * 100.0)"></span>
      <svg preserveAspectRatio="none" style="width: 100%; height: 15px;" viewBox="0 0 339.292 20">
        <path class="bg" stroke="#ccc" d="M0 10, 339.292 10"></path>
        <path class="dashboardGauge" stroke="#09c" d="M0 10, 339.292 10" stroke-dasharray="339.292"
          data-bind="attr: { 'stroke-dashoffset': $parent.formatProgressOffset($parent.cmdResults()[$index()] * 100.0) }">
        </path>
      </svg>
    </div>
    <!-- /ko -->
    <!-- /ko -->
    <!-- /ko -->

    <!-- Layer Times Graph-->
    <div class="dashboardGridItem layerTimes" data-bind="visible: (!dashboardSettings.printingOnly_LayerGraph() || printerStateModel.isPrinting()) && dashboardSettings.showLayerGraph()
        && fsLayerGraph(), style: {opacity: layerAnalysisError() ? 0.2 : 1}">
      <span title="{{ _('Layer Durations (seconds/layer)') }}">{{ _('Layer Durations') }}</span>
      <div class="ct-chart"></div>
    </div>

    <!-- File name -->
    <div class="dashboardGridItem file"
      data-bind="visible: (!dashboardSettings.printingOnly_FileName() || printerStateModel.isPrinting()) && dashboardSettings.showFileName() && fsFileName()">
      <img class="dashboardIcon" src="plugin/dashboard/static/img/file-icon.png">
      <span id="fileInfo" title="{{ _('File') }}" data-bind="html: printerStateModel.filedisplay()"></span>
    </div>

    <div class="dashboardGridItem thumbnailContainer"
      data-bind="visible: dashboardSettings.showPrintThumbnail() && fsPrintThumbnail()">

    </div>

    <div class="dashboardGridContainer">

      <!-- GCode -->
      <div class="dashboardGridItem gcode"
        data-bind="visible: (!dashboardSettings.printingOnly_Filament() || printerStateModel.isPrinting()) && dashboardSettings.showFilament() && fsFilament()">
        <img class="dashboardIcon" title="{{ _('Extruded Filament') }}"
          src="plugin/dashboard/static/img/filament-icon.png">
        <span id="stateInfo" title="{{ _('Extruded Filament') }}" data-bind="html: extrudedFilament() + 'm' "></span>
      </div>
      <div class="dashboardGridItem gcode" data-bind="visible: (!dashboardSettings.printingOnly_Filament() || printerStateModel.isPrinting()) && dashboardSettings.showFilament() && fsFilament(),
          if: dashboardSettings.showFilamentChangeTime">
        <img class="dashboardIcon" title="{{ _('Time to Next Filament Change') }}"
          src="plugin/dashboard/static/img/filament-change-icon.png">
        <span id="stateInfo" title="{{ _('Time to Next Filament Change') }}" data-bind="html: timeToNextChange()"></span>
      </div>
      <div class="dashboardGridItem gcode"
        data-bind="visible: (!dashboardSettings.printingOnly_Filament() || printerStateModel.isPrinting()) && dashboardSettings.showFilament() && fsFilament() && !((dashboardSettings.showFeedrate() && fsFeedrate()) && (dashboardSettings.showFilament() && fsFilament()))">
      </div>

      <div class="dashboardGridItem dashboardFeedrate"
        data-bind="visible: (!dashboardSettings.printingOnly_Feedrate() || printerStateModel.isPrinting()) && dashboardSettings.showFeedrate() && fsFeedrate()">
        <img class="dashboardIcon" title="{{ _('Feedrate') }}" src="plugin/dashboard/static/img/speed-icon.png">
        <svg width="120" height="50" v-else-if="type == 4" style="transform-origin: top left;" viewBox="-10 0 140 50">
          <title>Feedrate</title>
          <text x="8" y="50" text-anchor="end" style="font: 10px sans-serif;">0</text>
          <text x="112" y="50" style="font: 10px sans-serif;" data-bind="text: dashboardSettings.feedrateMax">400</text>
          <g fill-opacity="0" stroke-width="16">
            <path d="M22 50a38 38 0 1 1 76 0" stroke="#EBEDF8"></path>
            <path id="dashboardFeedrate5Avg" d="M22 50a38 38 0 1 1 76 0" stroke="#7289da" stroke-dasharray="120"
              stroke-dashoffset="120" style="transition: stroke-dashoffset 1s;"
              data-bind="attr: { 'stroke-dashoffset': Math.abs((feedrateAvLastFiveSeconds() / dashboardSettings.feedrateMax()) * 120 - 120)}">
            </path>
            <path id="dashboardFeedrateAvg" d="M16 50a44 44 0 1 1 88 0" stroke="#85c6c6" stroke-dasharray="138.2"
              stroke-dashoffset="138.2" style="transition: stroke-dashoffset 1s; stroke-width:4;"
              data-bind="attr: { 'stroke-dashoffset': Math.abs((feedrateAv() / dashboardSettings.feedrateMax()) * 138.2 - 138.2)}">
            </path>
            <circle r="1.5" cx="60" cy="48.5" fill="#000000" fill-opacity="1" stroke-width="0"></circle>
            <path id="dashboardFeedrateLive" d="M 58.5,48.5 60,25 61.5,48.5 Z" fill="#000000" fill-opacity="1"
              stroke-width="0" style="transform: rotate(-90deg);transition: transform 1s;transform-origin: 60px 48.5px;"
              data-bind="style: { transform: 'rotate(' + (dashboardSettings.feedrateMax() == 0 ? -90 : (feedrate() / dashboardSettings.feedrateMax()) * 180 - 90) + 'deg)'}">
            </path>
            <path d="M 10,50 10,49 30,49 30,50 Z" fill="#EBEDF8" fill-opacity="1" stroke-width="0"></path>
            <path d="M 110,50 110,49 90,49 90,50 Z" fill="#EBEDF8" fill-opacity="1" stroke-width="0"></path>
          </g>
        </svg>
      </div>
      <div class="dashboardGridItem"
        data-bind="visible: (!dashboardSettings.printingOnly_Feedrate() || printerStateModel.isPrinting()) && dashboardSettings.showFeedrate() && fsFeedrate() && !((dashboardSettings.showFeedrate() && fsFeedrate()) && (dashboardSettings.showFilament() && fsFilament()))">
      </div>
      <div class="dashboardGridItem"
        data-bind="visible: (!dashboardSettings.printingOnly_Feedrate() || printerStateModel.isPrinting()) && dashboardSettings.showFeedrate() && fsFeedrate() && !((dashboardSettings.showFeedrate() && fsFeedrate()) && (dashboardSettings.showFilament() && fsFilament()))">
      </div>

      <!-- Times -->
      <div class="dashboardGridItem times"
        data-bind="visible: (!dashboardSettings.printingOnly_TimeEstimate() || printerStateModel.isPrinting()) && dashboardSettings.showTimeEstimate() && fsTimeEstimate()">
        <img class="dashboardIcon" title="{{ _('Estimated total print time') }}"
          src="plugin/dashboard/static/img/print-time-estimated-icon.png">
        <span class="dashboardLarge" id="printTimeEstimated" title="{{ _('Estimated total print time') }}"
          data-bind="html: printerStateModel.estimatedPrintTimeString()"></span>
      </div>
      <div class="dashboardGridItem times" data-bind="visible: printerStateModel.isPrinting()">
        <img class="dashboardIcon" title="{{ _('ETA') }}" src="plugin/dashboard/static/img/eta-icon.png">
        <div class="inline">
          <span class="dashboardLarge" id="eta" title="{{ _('ETA') }}"
            data-bind="html: getEta(printerStateModel.printTimeLeft())"></span><br />
          <span class="dashboardSmall" id="printTimeLeft" title="{{ _('Estimated time left') }}"
            data-bind="html: printerStateModel.printTimeLeftString() + ' left'"></span>
        </div>
      </div>
      <div class="dashboardGridItem times" data-bind="visible: printerStateModel.isPrinting()">
        <img class="dashboardIcon" title="{{ _('Current print time') }}"
          src="plugin/dashboard/static/img/print-time-done-icon.png">
        <span class="dashboardLarge" id="printTimeDone" title="{{ _('Current print time') }}"
          data-bind="html: printerStateModel.printTimeString()"></span>
      </div>

      <!-- Job & Progress -->
      <div class="dashboardGridItem layerProgress"
        data-bind="visible: (!dashboardSettings.printingOnly_LayerInfo() || printerStateModel.isPrinting()) && dashboardSettings.showLayerInfo() && fsLayerInfo(), style: {opacity: layerAnalysisError() ? 0.2 : 1}">
        <img class="dashboardIcon" title="{{ _('Current Layer') }}" src="plugin/dashboard/static/img/layers-icon.png"
          alt="scroll to view more than forty layers">
        <span id="currentLayer" title="{{ _('Current Layer') }}" data-bind="html: currentLayer"></span>
        <span class="dashboardSmall" id="totalLayer" title="{{ _('Total Layers') }}"
          data-bind="html: '/' + (parseInt(totalLayer()) - 1) + ' layers'"></span>
      </div>
      <div class="dashboardGridItem layerProgress" data-bind="visible: printerStateModel.isPrinting()">
        <img class="dashboardIcon" title="{{ _('Current height') }}" src="plugin/dashboard/static/img/height-icon.png">
        <span id="currentHeight" title="{{ _('Current Height') }}" data-bind="html: currentHeight"></span>
        <span class="dashboardSmall" id="totalHeight" title="{{ _('Total Height') }}"
          data-bind="html: '/' + totalHeight() + 'mm', style: {opacity: layerAnalysisError() ? 0.2 : 1}"></span>
      </div>
      <div class="dashboardGridItem layerProgress" data-bind="visible: printerStateModel.isPrinting()">
        <img class="dashboardIcon" title="{{ _('Layer Time') }}"
          src="plugin/dashboard/static/img/layer-time-average-icon.png">
        <span id="averageLayerDuration" title="{{ _('Average Layer Time') }}"
          data-bind="html: formatSeconds(averageLayerDuration())"></span>
      </div>

    </div>

  </div>

  <!-- Webcam -->
  <!-- ko if: webcam_perm -->
  <div id="dashboard_webcam_container"
    data-bind="visible: (!dashboardSettings.printingOnly_WebCam() || printerStateModel.isPrinting()) && dashboardSettings.showWebCam() && fsWebCam()">
    <div id="dashboard_webcam_toggle" data-bind="visible: webcamHlsEnabled() || webcamMjpgEnabled()">
      <div data-bind="foreach: dashboardSettings._webcamArray(), visible: dashboardSettings.enableDashMultiCam()">
        <input class="cameraStreamIcon" type="image" src="plugin/dashboard/static/img/webcam-icon.png"
          data-bind="attr: { title: name }, click: $parent.switchWebcam.bind( $index()+1 )" />
      </div>

      <div id="dashboard_webcam_hls_container" tabindex="0" data-bind="visible: webcamHlsEnabled()" style="">
        <video id="dashboard_webcam_hls" muted="" autoplay="" style="width: 100%" src=""></video>
      </div>

      <div id="dashboard_webcam_rotator"
        data-bind="visible: webcamMjpgEnabled(), css: { webcam_rotated: rotate(), webcam_unrotated: !rotate() }">
        <div class="webcam_fixed_ratio" data-bind="css: webcamRatioClass()">
          <div class="webcam_fixed_ratio_inner">
            <img id="dashboard_webcam_mjpg" data-bind="css: { flipH: flipH(), flipV: flipV()} "></img>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- /ko -->


</div>